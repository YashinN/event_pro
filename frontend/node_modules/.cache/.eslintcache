[{"/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/index.js":"1","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/App.js":"2","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/Navbar.js":"3","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/pages/EditEventPage.js":"4","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/pages/LoginPage.js":"5","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/pages/HomePage.js":"6","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/pages/CreateEventPage.js":"7","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/MessageModal.js":"8","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/FilterComponent.js":"9","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/EventCard.js":"10","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/EditEventCard.js":"11","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/MyEventCard.js":"12","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/CreateEventForm.js":"13","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/EditEventModal.js":"14","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/utils/utlis.js":"15"},{"size":280,"mtime":1687687586598,"results":"16","hashOfConfig":"17"},{"size":5754,"mtime":1688472654634,"results":"18","hashOfConfig":"17"},{"size":5255,"mtime":1688462591461,"results":"19","hashOfConfig":"17"},{"size":3445,"mtime":1688371363952,"results":"20","hashOfConfig":"17"},{"size":6617,"mtime":1688468980356,"results":"21","hashOfConfig":"17"},{"size":2867,"mtime":1688377494942,"results":"22","hashOfConfig":"17"},{"size":537,"mtime":1688370036432,"results":"23","hashOfConfig":"17"},{"size":1265,"mtime":1688413684258,"results":"24","hashOfConfig":"17"},{"size":2195,"mtime":1688380864223,"results":"25","hashOfConfig":"17"},{"size":2904,"mtime":1688410926933,"results":"26","hashOfConfig":"17"},{"size":3412,"mtime":1688411740031,"results":"27","hashOfConfig":"17"},{"size":2259,"mtime":1688412076600,"results":"28","hashOfConfig":"17"},{"size":7695,"mtime":1688411585074,"results":"29","hashOfConfig":"17"},{"size":10852,"mtime":1688412351663,"results":"30","hashOfConfig":"17"},{"size":395,"mtime":1688381861076,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q23pdq",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/index.js",[],[],"/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/App.js",["83","84"],[],"import { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\n// comonents.\nimport Navbar from \"./components/Navbar\";\nimport LoginPage from \"./pages/LoginPage\";\nimport HomePage from \"./pages/HomePage\";\nimport CreateEventPage from \"./pages/CreateEventPage\";\nimport EditEventPage from \"./pages/EditEventPage\";\n\nfunction App() {\n  // checks if local storage for user.\n  const setUser = () => {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    // checks if user exists.\n    if (user) {\n      // gets user\n      return user;\n    }\n    // return no user\n    return null;\n  };\n\n  // state to define user.np\n  const [isUser, setIsUser] = useState(setUser());\n  // state to handle logged in or not\n  const [loggedIn, setLoggedIn] = useState(null);\n  // stores all events.\n  const [events, setEvents] = useState([]);\n  // stores users saved events.\n  const [myEvents, setMyEvents] = useState([]);\n  // loading state for api calls.\n  const [loading, setLoading] = useState(true);\n\n  // request to get all events from server\n  const getEvents = async () => {\n    setLoading(true);\n    try {\n      // req to fetch data\n      const response = await fetch(process.env.REACT_APP_EVENTS);\n      // stores events as json\n      const data = await response.json();\n\n      // if response ok sets component data\n      if (response.ok) {\n        setLoading(null);\n        setEvents(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // request to get user saved events from server.\n  const getMyEvents = async () => {\n    try {\n      // request to server with user id as identifier.\n      const response = await fetch(\n        process.env.REACT_APP_MYEVENTS + isUser.email,\n        {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${isUser.token}`,\n          },\n        }\n      );\n      // stores user saved events as json\n      const data = await response.json();\n      if (response.ok) {\n        // sets component data for user events.\n        setMyEvents(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // req to verify google and github login\n  const getGoogleUser = async () => {\n    // fetch req to server/\n    const response = await fetch(process.env.REACT_APP_SUCCESS, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true,\n      },\n    });\n\n    // stores user details.\n    const data = await response.json();\n\n    if (isUser) {\n      return;\n    }\n\n    if (response.ok) {\n      // gets user email address\n      const user = data.user[\"emails\"];\n      const email = user[0].value;\n      const isAdmin = data.isAdmin;\n      const token = data.token;\n      // stores user data in local storage.\n      localStorage.setItem(\n        \"user\",\n        JSON.stringify({ email: email, isAdmin, token })\n      );\n      // sets users\n      setIsUser(setUser());\n    }\n  };\n\n  // use effect run everytime a user logs in/out or sign up\n  useEffect(() => {\n    // gets user from local storage.\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    if (user) {\n      // if user exists sets isUser state.\n      setIsUser(user);\n    } else {\n      setIsUser(null);\n    }\n  }, [loggedIn]);\n\n  // use effect checks if google or github has been signed in\n  // gets all events\n  useEffect(() => {\n    getGoogleUser();\n\n    getEvents();\n  }, []);\n\n  // useEffect gets user saved events when user logs in or when events state changes.\n  useEffect(() => {\n    if (isUser) {\n      getMyEvents();\n    }\n  }, [isUser, events]);\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Navbar\n          user={isUser}\n          setLoggedIn={setLoggedIn}\n          events={events}\n          myEvents={myEvents}\n          setMyEvents={setMyEvents}\n        />\n        <div className=\"pages\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <HomePage\n                  events={events}\n                  isUser={isUser}\n                  setIsUser={setIsUser}\n                  loading={loading}\n                  setMyEvents={setMyEvents}\n                />\n              }\n            />\n            <Route\n              path=\"/createEvent\"\n              element={\n                !isUser ? (\n                  <Navigate to=\"/\" />\n                ) : isUser.isAdmin ? (\n                  <CreateEventPage\n                    setEvents={setEvents}\n                    events={events}\n                    user={isUser}\n                  />\n                ) : (\n                  <Navigate to=\"/\" />\n                )\n              }\n            />\n            <Route\n              path=\"/editEvent\"\n              element={\n                !isUser ? (\n                  <Navigate to=\"/\" />\n                ) : isUser.isAdmin ? (\n                  <EditEventPage\n                    events={events}\n                    setEvents={setEvents}\n                    loading={loading}\n                    user={isUser}\n                  />\n                ) : (\n                  <Navigate to=\"/\" />\n                )\n              }\n            />\n            <Route\n              path=\"/login\"\n              element={\n                isUser ? (\n                  <Navigate to=\"/\" />\n                ) : (\n                  <LoginPage setLoggedIn={setLoggedIn} />\n                )\n              }\n            />\n            <Route path=\"*\" element={<HomePage events={events} />} />\n          </Routes>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/Navbar.js",["85"],[],"import eventLogo from \"../images/Event.png\";\nimport \"./Navbar.css\";\nimport { Link } from \"react-router-dom\";\nimport MyEventCard from \"./MyEventCard\";\nimport MessageModal from \"./MessageModal\";\nimport { useState } from \"react\";\n\nconst Navbar = (props) => {\n  // state to toggle modals\n  const [showModal, setShowModal] = useState(false);\n\n  // request to logut user. Logs out user that has logged in with github or goolgle.\n  const logoutRequest = async () => {\n    const response = await fetch(process.env.REACT_APP_LOGOUT);\n  };\n\n  // handles  logout\n  const handleLogout = () => {\n    // removes user from local storage\n    localStorage.removeItem(\"user\");\n    // sets logged in state to false\n    props.setLoggedIn(false);\n    logoutRequest();\n  };\n\n  // opens modal\n  const openModal = () => {\n    setShowModal(true);\n  };\n  // closes modal.\n  const closeModal = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <nav\n        className=\"navbar navbar-expand-lg bg-primary p-3\"\n        data-bs-theme=\"dark\"\n      >\n        <div className=\"container-fluid\">\n          <Link to=\"/\" className=\"navbar-brand\">\n            <img src={eventLogo} alt=\"\" className=\"event-logo\" />\n          </Link>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarColor01\"\n            aria-controls=\"navbarColor01\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\n            <ul className=\"navbar-nav me-auto\">\n              <li className=\"nav-item\">\n                <Link to=\"/\" className=\"nav-link active\" href=\"/\">\n                  All Events\n                  <span className=\"visually-hidden\">(current)</span>\n                </Link>\n              </li>\n\n              {props.user && (\n                <li className=\"nav-item\">\n                  <a\n                    className=\"btn btn-primary nav-link\"\n                    data-bs-toggle=\"offcanvas\"\n                    href=\"#offcanvasExample\"\n                    role=\"button\"\n                    aria-controls=\"offcanvasExample\"\n                  >\n                    MY EVENTS\n                  </a>\n                </li>\n              )}\n\n              {!props.user\n                ? null\n                : props.user.isAdmin && (\n                    <li className=\"nav-item dropdown\">\n                      <Link\n                        className=\"nav-link dropdown-toggle\"\n                        data-bs-toggle=\"dropdown\"\n                        role=\"button\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\"\n                      >\n                        Manage Events\n                      </Link>\n                      <div className=\"dropdown-menu\">\n                        <Link to=\"createEvent\" className=\"dropdown-item\">\n                          Create Event\n                        </Link>\n                        <Link to=\"editEvent\" className=\"dropdown-item\">\n                          Edit Event\n                        </Link>\n                      </div>\n                    </li>\n                  )}\n            </ul>\n          </div>\n\n          {props.user ? (\n            <div className=\"login-credentials\">\n              <p className=\"text-light m-0 mx-3\">{props.user.email}</p>\n              <Link to=\"/\">\n                <button\n                  className=\"btn btn-outline-light btn-sm\"\n                  type=\"button\"\n                  onClick={handleLogout}\n                >\n                  Logout\n                </button>\n              </Link>\n            </div>\n          ) : (\n            <div>\n              <Link to=\"/login\">\n                <button type=\"button\" className=\"btn btn-outline-light btn-sm\">\n                  Login | Signup\n                </button>\n              </Link>\n            </div>\n          )}\n        </div>\n      </nav>\n      <div\n        className=\"offcanvas offcanvas-start\"\n        tabIndex=\"-1\"\n        id=\"offcanvasExample\"\n        aria-labelledby=\"offcanvasExampleLabel\"\n      >\n        <div className=\"offcanvas-header\">\n          <h3 className=\"offcanvas-title\" id=\"offcanvasExampleLabel\">\n            My Events\n          </h3>\n          <button\n            type=\"button\"\n            className=\"btn-close text-reset\"\n            data-bs-dismiss=\"offcanvas\"\n            aria-label=\"Close\"\n          ></button>\n        </div>\n        <div className=\"offcanvas-body\">\n          <div className=\"row gy-5\">\n            {props.myEvents.map((event, index) => (\n              <MyEventCard\n                event={event}\n                colour={index % 2 === 0 ? \"color-1\" : \"color-4\"}\n                key={index}\n                user={props.user}\n                setMyEvents={props.setMyEvents}\n                openModal={openModal}\n              />\n            ))}\n          </div>\n        </div>\n        <MessageModal\n          showModal={showModal}\n          closeModal={closeModal}\n          message={\"Event has been removed!\"}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Navbar;\n","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/pages/EditEventPage.js",[],[],"/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/pages/LoginPage.js",["86"],[],"import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport googleIcon from \"../images/google.png\";\nimport githubIcon from \"../images/github.png\";\nimport \"./LoginPage.css\";\n\nconst LoginPage = (props) => {\n  const [switchForm, setSwitchForm] = useState(\"Log In\");\n\n  const [email, setEmail] = useState(\"\");\n\n  const [password, setPassword] = useState(\"\");\n\n  const [emptyFields, setEmptyFields] = useState([]);\n\n  const [error, setError] = useState(null);\n\n  const [isAdmin, setIsAdmin] = useState(null);\n\n  const navigate = useNavigate();\n\n  const google = () => {\n    window.open(process.env.REACT_APP_GOOGLE_SUCCESS, \"_self\");\n  };\n\n  const github = () => {\n    window.open(process.env.REACT_APP_GITHUB_SUCCESS, \"_self\");\n  };\n\n  // clears states to default.\n  const clearStates = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n    setEmptyFields([]);\n    setError(null);\n  };\n\n  // makes request to server sends user credentials\n  const loginRequest = async () => {\n    try {\n      const response = await fetch(process.env.REACT_APP_LOGIN, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      // recieves auth token and user email from db\n      const data = await response.json();\n\n      // if res not ok sets error and recevies list of empty inputs from server.\n      if (!response.ok) {\n        // sets empty fields.\n        setEmptyFields(data.emptyFields);\n        setError(data.error);\n      }\n\n      // if res ok.\n      if (response.ok) {\n        // sets empty fields to default.\n        setEmptyFields([]);\n        // resets error.\n        setError(null);\n        // stores user token and email in local storage.\n        localStorage.setItem(\"user\", JSON.stringify(data));\n        // sets login state.\n        props.setLoggedIn(true);\n        navigate(\"/\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // request to create new user in db.\n  const signupRequest = async () => {\n    try {\n      // post req with user email and password.\n      const response = await fetch(process.env.REACT_APP_SIGNIN, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      // receives user email and auth token.\n      const data = await response.json();\n\n      if (!response.ok) {\n        // sets empty fields to default.\n        setEmptyFields(data.emptyFields);\n        // sets error.\n        setError(data.error);\n      }\n\n      if (response.ok) {\n        setEmptyFields([]);\n        setError(null);\n        localStorage.setItem(\"user\", JSON.stringify(data));\n        props.setLoggedIn(true);\n        navigate(\"/\");\n      }\n    } catch (eror) {\n      console.log(error);\n    }\n  };\n\n  // login button clicked, makes call to login request.\n  const handleLogin = () => {\n    loginRequest();\n  };\n\n  // sign up button clicked makes request to sign up user.\n  const handleSignUp = () => {\n    signupRequest();\n  };\n\n  const handleMenu = (e) => {\n    if (switchForm === \"Log In\") {\n      setSwitchForm(\"Sign Up\");\n    } else {\n      setSwitchForm(\"Log In\");\n    }\n\n    clearStates();\n  };\n\n  useEffect(() => {\n    if (email === \"admin@gmail.com\" && isAdmin) {\n      loginRequest();\n    }\n  }, [email]);\n\n  const demoAdmin = () => {\n    setIsAdmin(true);\n    setEmail(\"admin@gmail.com\");\n    setPassword(\"admin@123456\");\n  };\n\n  return (\n    <section className=\"container\">\n      <div className=\"container login-container p-5\">\n        <form action=\"\">\n          <div className=\"form-group\">\n            <div className=\"mb-4 login-title-container\">\n              <h2 className=\"mb-0\">{switchForm}</h2>\n              {error && <p className=\"text-danger bm-0\">{error}</p>}\n            </div>\n\n            <div className=\"form-floating mb-3\">\n              <input\n                type=\"email\"\n                className={`form-control ${\n                  emptyFields.includes(\"email\") ? \"is-invalid\" : \"\"\n                }`}\n                id=\"email\"\n                placeholder=\"name@example.com\"\n                onChange={(e) => setEmail(e.target.value)}\n                value={email}\n              />\n              <label htmlFor=\"email\">Email address</label>\n            </div>\n            <div className=\"form-floating mb-3\">\n              <input\n                type=\"password\"\n                className={`form-control ${\n                  emptyFields.includes(\"password\") ? \"is-invalid\" : \"\"\n                }`}\n                id=\"password\"\n                placeholder=\"Password\"\n                onChange={(e) => setPassword(e.target.value)}\n                value={password}\n              />\n              <label htmlFor=\"password\">Password</label>\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-primary auth-btn btn mb-2\"\n              onClick={google}\n            >\n              <span className=\"auth-btn-container\">\n                Google <img src={googleIcon} alt=\"\" className=\"auth-icon\" />\n              </span>\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-primary auth-btn\"\n              onClick={github}\n            >\n              <span className=\"auth-btn-container\">\n                Github <img src={githubIcon} alt=\"\" className=\"auth-icon\" />\n              </span>\n            </button>\n\n            <div className=\"mt-4 login-btns\">\n              {switchForm === \"Log In\" && (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary\"\n                  onClick={handleLogin}\n                >\n                  Login\n                </button>\n              )}\n\n              {switchForm === \"Sign Up\" && (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary\"\n                  onClick={handleSignUp}\n                >\n                  Sign Up\n                </button>\n              )}\n\n              <button type=\"button\" className=\"btn-switch\" onClick={handleMenu}>\n                {switchForm === \"Log In\" ? \"Sign Up\" : \"Log In\"}\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-info admin-btn\"\n                onClick={demoAdmin}\n              >\n                Demo Admin\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default LoginPage;\n","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/pages/HomePage.js",["87"],[],"import { useState } from \"react\";\n\nimport EventCard from \"../components/EventCard\";\nimport FilterComponent from \"../components/FilterComponent\";\n\nimport \"./HomePage.css\";\n\nconst HomePage = (props) => {\n  const [entity, setEntity] = useState(\"All\");\n  const [month, setMonth] = useState(1);\n  const [filterData, setFilterData] = useState([]);\n\n  const getMonth = (date) => {\n    if (!date) {\n      return null;\n    }\n    const splitDate = date.split(\"-\");\n    return Number(splitDate[1]);\n  };\n\n  const filterDate = (currentMonth) => {\n    const filterItems = props.events.filter(\n      (event) => getMonth(event.date) === currentMonth\n    );\n    return filterItems;\n  };\n\n  // sets entity or type of media when radio fields are selected.\n  const entityHandler = (e) => {\n    // sets entity type eg. movie, ebook ect to be searched.\n    setEntity(e.target.id);\n    const { month } = e.target.dataset;\n    setMonth(month);\n    const data = filterDate(Number(month));\n    setFilterData(data);\n  };\n\n  return (\n    <section className=\"container-fluid section-wrapper\">\n      <div className=\"container events-wrapper\">\n        <h1 className=\"main-title\">Events 2023</h1>\n        <FilterComponent entity={entity} entityHandler={entityHandler} />\n        <h2 className=\"mb-5 sec-title\">{entity} Events</h2>\n\n        {props.loading ? (\n          <div className=\"loading-container\">\n            <div className=\"spinner-border\" role=\"status\">\n              <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <span>Loading...</span>\n          </div>\n        ) : (\n          <div className=\"row gy-5\">\n            {entity === \"All\" &&\n              props.events.map((event, index) => (\n                <EventCard\n                  event={event}\n                  colour={index % 2 === 0 ? \"color-2\" : \"color-3\"}\n                  key={index}\n                  isUser={props.isUser}\n                  setIsUser={props.setIsUser}\n                  loading={props.loading}\n                  setMyEvents={props.setMyEvents}\n                />\n              ))}\n\n            {entity !== \"All\" &&\n              filterData.map((event, index) => (\n                <EventCard\n                  event={event}\n                  colour={index % 2 === 0 ? \"color-2\" : \"color-3\"}\n                  key={index}\n                  isUser={props.isUser}\n                  setIsUser={props.setIsUser}\n                  setMyEvents={props.setMyEvents}\n                />\n              ))}\n            {props.events.length === 0 && entity === \"All\" && (\n              <h2 className=\"text-info\">No Events ....</h2>\n            )}\n            {filterData.length === 0 && entity !== \"All\" && (\n              <h2 className=\"text-info\">No Events in {entity} ....</h2>\n            )}\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default HomePage;\n","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/pages/CreateEventPage.js",[],[],"/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/MessageModal.js",[],[],"/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/FilterComponent.js",[],[],"/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/EventCard.js",[],[],"/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/EditEventCard.js",[],[],"/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/MyEventCard.js",[],[],"/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/CreateEventForm.js",["88"],[],"import { useState } from \"react\";\nimport { convertImage } from \"../utils/utlis\";\nimport MessageModal from \"./MessageModal\";\nimport \"./CreateEventForm.css\";\n\nconst CreateEventForm = (props) => {\n  // Form inputs for new event\n  const [description, setDescription] = useState(\"\");\n  const [venue, setVenue] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  // Gets current date limits date input\n  const [currentDate, setCurrentDate] = useState(getCurrentDate());\n  // Sets loading state when making api calls\n  const [loading, setLoading] = useState(null);\n  // Stores image as base64 data\n  const [postImage, setPostImage] = useState({ myFile: \"\" });\n  // Shows message modal when event created.\n  const [showModal, setShowModal] = useState(false);\n  // state stores empty fields / empty inputs.\n  const [emptyFields, setEmptyFields] = useState([]);\n  // state handles error from db.\n  const [error, setError] = useState(null);\n\n  // function gets the current date\n  function getCurrentDate() {\n    // formats date\n    return new Date().toISOString().slice(0, 10);\n  }\n\n  // resets all states to default\n  const resetStates = () => {\n    setDescription(\"\");\n    setDate(\"\");\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setVenue(\"\");\n    setError(null);\n    setEmptyFields([]);\n    setPostImage({ myFile: \"\" });\n    setImage(\"\");\n  };\n\n  // Makes request to api to create new event\n  const creatEventRequest = async () => {\n    // sets loading state\n    setLoading(true);\n    // Gets base64 image\n    const image = postImage.myFile;\n\n    try {\n      // fetch request sends form input data to server.\n      const response = await fetch(process.env.REACT_APP_EVENTS, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${props.user.token}`,\n        },\n        body: JSON.stringify({\n          description,\n          date,\n          venue,\n          startTime,\n          endTime,\n          image,\n        }),\n      });\n\n      const data = await response.json();\n\n      // if res not ok sets error ,empty fields and loading state.\n      if (!response.ok) {\n        setLoading(null);\n        setError(data.error);\n        setEmptyFields(data.emptyFields);\n      }\n\n      // if res ok updates event records, resets states & displays success modal.\n      if (response.ok) {\n        setLoading(null);\n        props.events.push(data);\n        setError(null);\n        resetStates();\n        openModal();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Makes create event request to server on click.\n  const handleCreate = () => {\n    creatEventRequest();\n  };\n\n  // Resets states when clear button clicked.\n  const handleClear = () => {\n    resetStates();\n  };\n\n  // Function toggles state to open modal\n  const openModal = () => {\n    setShowModal(true);\n  };\n\n  // Function toggles state to close modal\n  const closeModal = () => {\n    setShowModal(false);\n  };\n\n  // Function converts image to base64 to send and store in mongoDB\n  const handleImage = async (e) => {\n    // stores image name.\n    setImage(e.target.value);\n    // gets image data.\n    const image = e.target.files[0];\n    // checks if image exists\n    if (e.target.files[0]) {\n      // calls convertImage to create base64 image.\n      const base64 = await convertImage(image);\n      // sets and stores the converted image.\n      setPostImage({ ...postImage, myFile: base64 });\n    }\n  };\n\n  return (\n    <form action=\"\">\n      {error && <p className=\"text-danger mb-0\">{error}</p>}\n\n      <div className=\"form-group\">\n        <label for=\"description\" className=\"form-label mt-4\">\n          Description\n        </label>\n        <input\n          type=\"text\"\n          className={`form-control form-control-sm ${\n            emptyFields.includes(\"description\") ? \"is-invalid\" : \"\"\n          }`}\n          id=\"description\"\n          placeholder=\"Enter description\"\n          value={description}\n          onChange={(e) => {\n            setDescription(e.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <label for=\"startDate\" className=\"form-label mt-4\">\n          Start Date\n        </label>\n        <input\n          type=\"date\"\n          className={`form-control form-control-sm ${\n            emptyFields.includes(\"date\") ? \"is-invalid\" : \"\"\n          }`}\n          min={currentDate}\n          id=\"startDate\"\n          placeholder=\"Enter event date\"\n          value={date}\n          onChange={(e) => {\n            setDate(e.target.value);\n          }}\n        />\n      </div>\n      <div className=\"time-container\">\n        <div className=\"form-group\">\n          <label for=\"start-time\" className=\"form-label mt-4\">\n            Start Time\n          </label>\n          <input\n            type=\"time\"\n            className={`form-control form-control-sm ${\n              emptyFields.includes(\"startTime\") ? \"is-invalid\" : \"\"\n            }`}\n            id=\"start-time\"\n            value={startTime}\n            onChange={(e) => {\n              setStartTime(e.target.value);\n            }}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label for=\"end-time\" className=\"form-label mt-4\">\n            End Time\n          </label>\n          <input\n            type=\"time\"\n            className={`form-control form-control-sm ${\n              emptyFields.includes(\"endTime\") ? \"is-invalid\" : \"\"\n            }`}\n            id=\"end-time\"\n            value={endTime}\n            onChange={(e) => setEndTime(e.target.value)}\n          />\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label for=\"exampleSelect1\" className=\"form-label mt-4\">\n          Choose Venue\n        </label>\n        <select\n          className={`form-control form-control-sm ${\n            emptyFields.includes(\"venue\") ? \"is-invalid\" : \"\"\n          }`}\n          id=\"exampleSelect1\"\n          value={venue}\n          onChange={(e) => {\n            setVenue(e.target.value);\n          }}\n        >\n          <option></option>\n          <option>A</option>\n          <option>B</option>\n          <option>C</option>\n          <option>D</option>\n          <option>E</option>\n        </select>\n      </div>\n\n      <div className=\"form-group\">\n        <label for=\"formFile\" className=\"form-label mt-4\">\n          Select Image\n        </label>\n        <input\n          className={`form-control form-control-sm ${\n            emptyFields.includes(\"image\") ? \"is-invalid\" : \"\"\n          }`}\n          type=\"file\"\n          id=\"formFile\"\n          value={image}\n          onChange={(e) => {\n            handleImage(e);\n          }}\n          accept=\".jpeg,.png,.jpeg\"\n        />\n      </div>\n\n      <div className=\"mt-4 create-wrapper\">\n        <button type=\"button\" className=\"btn btn-primary\" onClick={handleClear}>\n          Clear\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-success mx-4\"\n          onClick={handleCreate}\n        >\n          {loading ? (\n            <div className=\"loading-container\">\n              <div className=\"spinner-border \" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n              </div>\n              <span className=\"mx-2\">Loading...</span>\n            </div>\n          ) : (\n            \"Create\"\n          )}\n        </button>\n      </div>\n      <MessageModal\n        showModal={showModal}\n        closeModal={closeModal}\n        message={\"Event has been added!\"}\n      />\n    </form>\n  );\n};\n\nexport default CreateEventForm;\n","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/components/EditEventModal.js",["89","90"],[],"import { useState } from \"react\";\nimport { convertImage } from \"../utils/utlis\";\nimport MessageModal from \"./MessageModal\";\n\nconst EditEventModal = (props) => {\n  // Form inputs for new event sets values to prop data.\n  const [description, setDescription] = useState(props.event.description);\n  const [venue, setVenue] = useState(props.event.venue);\n  const [date, setDate] = useState(props.event.date);\n  const [startTime, setStartTime] = useState(props.event.startTime);\n  const [endTime, setEndTime] = useState(props.event.endTime);\n\n  // Gets current date limits date input\n  const [currentDate, setCurrentDate] = useState(getCurrentDate());\n  // Shows message modal when event created.\n  const [showModal, setShowModal] = useState(false);\n  // Sets loading state when making api calls\n  const [loading, setLoading] = useState(null);\n\n  // state stores empty fields.\n  const [emptyFields, setEmptyFields] = useState([]);\n  // state handles error from db.\n  const [error, setError] = useState(null);\n  const [image, setImage] = useState(\"img\");\n  // Stores image as base64 data\n  const [postImage, setPostImage] = useState(props.event.image);\n\n  // get current date and formats\n  function getCurrentDate() {\n    return new Date().toISOString().slice(0, 10);\n  }\n\n  // resets states to initial prop data.\n  const resetStates = () => {\n    setDescription(props.event.description);\n    setDate(props.event.date);\n    setStartTime(props.event.startTime);\n    setEndTime(props.event.endTime);\n    setVenue(props.event.venue);\n    setError(null);\n    setEmptyFields([]);\n    setPostImage(props.event.image);\n    setImage(\"img\");\n    setLoading(null);\n  };\n\n  // Patch request to server to edit event.\n  const editEventRequest = async () => {\n    // stores base64 converted image.\n    const image = postImage.myFile;\n    setLoading(true);\n\n    try {\n      // makes request using event id in params and sends state data in body.\n      const response = await fetch(\n        process.env.REACT_APP_EVENTS + \"/\" + props.event._id,\n        {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${props.user.token}`,\n          },\n          body: JSON.stringify({\n            description,\n            date,\n            venue,\n            startTime,\n            image,\n            endTime,\n          }),\n        }\n      );\n\n      // gets new event data from server.\n      const data = await response.json();\n\n      // if res not ok sets error and empty fields.\n      if (!response.ok) {\n        setLoading(null);\n        setError(data.error);\n        setEmptyFields(data.emptyFields);\n      }\n\n      // if res ok updates state event recors , resets states to default, displays success message.\n      if (response.ok) {\n        setLoading(null);\n        props.setEvents(data);\n        setError(null);\n        openModal();\n        const eventsFilter = props.filterDate(Number(props.month), data);\n        props.setFilterData(eventsFilter);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // edit button clicked makes request to edit a event.\n  const handleEdit = () => {\n    editEventRequest();\n  };\n\n  // closes message modal for successful edit.\n  const handleClose = () => {\n    props.closeModal();\n    resetStates();\n  };\n\n  // opens edit modal\n  const openModal = () => {\n    setShowModal(true);\n  };\n\n  // closes edit modal\n  const closeModal = () => {\n    setShowModal(false);\n  };\n\n  // Function converts image to base64 to send and store in mongoDB\n  const handleImage = async (e) => {\n    // stores image name.\n    setImage(e.target.value);\n    // gets image data.\n    const image = e.target.files[0];\n    // checks if image exists\n    if (e.target.files[0]) {\n      // calls convertImage to create base64 image.\n      const base64 = await convertImage(image);\n      // sets and stores the converted image.\n      setPostImage({ ...postImage, myFile: base64 });\n    }\n  };\n\n  return (\n    <div>\n      {props.showModal && (\n        <>\n          <div\n            className=\"modal fade show\"\n            tabIndex=\"-1\"\n            style={{ display: \"block\" }}\n          >\n            <div className=\"modal-dialog modal-dialog-centered \">\n              <div className=\"modal-content p-3\">\n                <div className=\"modal-body\">\n                  <form action=\"\">\n                    <h1>Edit Event</h1>\n                    {error && <p className=\"text-danger mb-0\">{error}</p>}\n\n                    <div className=\"form-group\">\n                      <label for=\"description\" className=\"form-label mt-4\">\n                        Description\n                      </label>\n                      <input\n                        type=\"text\"\n                        className={`form-control form-control-sm ${\n                          emptyFields.includes(\"description\")\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                        id=\"description\"\n                        placeholder=\"Enter description\"\n                        value={description}\n                        onChange={(e) => {\n                          setDescription(e.target.value);\n                        }}\n                      />\n                    </div>\n\n                    <div className=\"form-group\">\n                      <label for=\"startDate\" className=\"form-label mt-4\">\n                        Start Date\n                      </label>\n                      <input\n                        type=\"date\"\n                        className={`form-control form-control-sm ${\n                          emptyFields.includes(\"date\") ? \"is-invalid\" : \"\"\n                        }`}\n                        min={currentDate}\n                        id=\"startDate\"\n                        placeholder=\"Enter event date\"\n                        value={date}\n                        onChange={(e) => {\n                          setDate(e.target.value);\n                        }}\n                      />\n                    </div>\n                    <div className=\"time-container\">\n                      <div className=\"form-group\">\n                        <label for=\"start-time\" className=\"form-label mt-4\">\n                          Start Time\n                        </label>\n                        <input\n                          type=\"time\"\n                          className={`form-control form-control-sm ${\n                            emptyFields.includes(\"startTime\")\n                              ? \"is-invalid\"\n                              : \"\"\n                          }`}\n                          id=\"start-time\"\n                          value={startTime}\n                          onChange={(e) => {\n                            setStartTime(e.target.value);\n                          }}\n                        />\n                      </div>\n                      <div className=\"form-group\">\n                        <label for=\"end-time\" className=\"form-label mt-4\">\n                          End Time\n                        </label>\n                        <input\n                          type=\"time\"\n                          className={`form-control form-control-sm ${\n                            emptyFields.includes(\"endTime\") ? \"is-invalid\" : \"\"\n                          }`}\n                          id=\"end-time\"\n                          value={endTime}\n                          onChange={(e) => setEndTime(e.target.value)}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                      <label for=\"exampleSelect1\" className=\"form-label mt-4\">\n                        Choose Venue\n                      </label>\n                      <select\n                        className={`form-control form-control-sm ${\n                          emptyFields.includes(\"venue\") ? \"is-invalid\" : \"\"\n                        }`}\n                        id=\"exampleSelect1\"\n                        value={venue}\n                        onChange={(e) => {\n                          setVenue(e.target.value);\n                        }}\n                      >\n                        <option></option>\n                        <option>A</option>\n                        <option>B</option>\n                        <option>C</option>\n                        <option>D</option>\n                        <option>E</option>\n                      </select>\n                    </div>\n\n                    <div className=\"form-group\">\n                      <label for=\"formFile\" className=\"form-label mt-4\">\n                        Select Image\n                      </label>\n                      <input\n                        className={`form-control form-control-sm ${\n                          emptyFields.includes(\"image\") ? \"is-invalid\" : \"\"\n                        }`}\n                        type=\"file\"\n                        id=\"formFile\"\n                        onChange={(e) => {\n                          handleImage(e);\n                        }}\n                        accept=\".jpeg,.png,.jpeg\"\n                      />\n                    </div>\n\n                    <div className=\"mt-4\">\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-primary\"\n                        onClick={handleClose}\n                      >\n                        Cancel\n                      </button>\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-success mx-4\"\n                        onClick={handleEdit}\n                      >\n                        {loading ? (\n                          <div className=\"loading-container\">\n                            <div className=\"spinner-border\" role=\"status\">\n                              <span className=\"visually-hidden\">\n                                Loading...\n                              </span>\n                            </div>\n                            <span className=\"mx-2\">Loading...</span>\n                          </div>\n                        ) : (\n                          \"Update\"\n                        )}\n                      </button>\n                    </div>\n                    <MessageModal\n                      showModal={showModal}\n                      closeModal={closeModal}\n                      message={\"Event has been updated!\"}\n                      closeForm={props.closeModal}\n                    />\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div\n            className=\"modal-backdrop fade show\"\n            onClick={props.closeModal}\n          ></div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default EditEventModal;\n","/Users/yashin/Documents/GitHub/Codespace/event_pro/frontend/src/utils/utlis.js",[],[],{"ruleId":"91","severity":1,"message":"92","line":133,"column":6,"nodeType":"93","endLine":133,"endColumn":8,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"95","line":140,"column":6,"nodeType":"93","endLine":140,"endColumn":22,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":14,"column":11,"nodeType":"99","messageId":"100","endLine":14,"endColumn":19},{"ruleId":"91","severity":1,"message":"101","line":134,"column":6,"nodeType":"93","endLine":134,"endColumn":13,"suggestions":"102"},{"ruleId":"97","severity":1,"message":"103","line":10,"column":10,"nodeType":"99","messageId":"100","endLine":10,"endColumn":15},{"ruleId":"97","severity":1,"message":"104","line":15,"column":23,"nodeType":"99","messageId":"100","endLine":15,"endColumn":37},{"ruleId":"97","severity":1,"message":"104","line":14,"column":23,"nodeType":"99","messageId":"100","endLine":14,"endColumn":37},{"ruleId":"97","severity":1,"message":"105","line":24,"column":10,"nodeType":"99","messageId":"100","endLine":24,"endColumn":15},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getGoogleUser'. Either include it or remove the dependency array.","ArrayExpression",["106"],"React Hook useEffect has a missing dependency: 'getMyEvents'. Either include it or remove the dependency array.",["107"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'isAdmin' and 'loginRequest'. Either include them or remove the dependency array.",["108"],"'month' is assigned a value but never used.","'setCurrentDate' is assigned a value but never used.","'image' is assigned a value but never used.",{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [getGoogleUser]",{"range":"115","text":"116"},"Update the dependencies array to be: [isUser, events, getMyEvents]",{"range":"117","text":"118"},"Update the dependencies array to be: [email, isAdmin, loginRequest]",{"range":"119","text":"120"},[3569,3571],"[getGoogleUser]",[3731,3747],"[isUser, events, getMyEvents]",[3381,3388],"[email, isAdmin, loginRequest]"]